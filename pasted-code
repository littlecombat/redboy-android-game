///left stick and A

//Get the player's input
key_right = keyboard_check(vk_right) || (gamepad_axis_value(0,gp_axislh) > 0);
key_left = -(keyboard_check(vk_left) || (gamepad_axis_value(0,gp_axislh) < -0));
key_jump = keyboard_check_pressed(vk_up) || gamepad_button_check_pressed(0,gp_face1);

//React to inputs
move = key_left + key_right;
hsp += move * fric;     //add friction to movement, accelerate
if move = 0 {hsp -= hsp * fric}     //decelerate
if (hsp > movespeed) {hsp = movespeed}      //top speed
if (hsp < -movespeed) {hsp = -movespeed}
if (vsp < 10) vsp += grav;


//jump
if (place_meeting(x,y+1,obj_wall))
{
    vsp = key_jump * -jumpspeed;
    doublejump = 1;
}

//double jump
if (!place_meeting(x,y+2,obj_wall)) && (!place_meeting(x+3,y,obj_wall)) && (!place_meeting(x-3,y,obj_wall))
{
    if (key_jump = 1) && (doublejump = 1)
    {
    vsp = -jumpspeed + abs(0.5*vsp);
    doublejump = 0;
    }
}

//wall jump
if ((place_meeting(x+3,y,obj_wall) || place_meeting(x-3,y,obj_wall))  && !place_meeting(x,y+2,obj_wall))
{
    if (key_jump = 1)
    {
    vsp = key_jump * -jumpspeed;
    doublejump = 1;
        if place_meeting(x+3,y,obj_wall)
        {
        hsp -= 6;
        }
        if place_meeting(x-3,y,obj_wall)
        {
        hsp += 6;
        }
    }
}

//Horizontal Collision
if (place_meeting(x+hsp,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall))
{
    walljump = 1;
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;
